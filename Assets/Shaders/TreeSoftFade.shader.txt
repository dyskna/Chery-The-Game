Shader "Custom/TreeSoftFade"
{
    Properties
    {
        _MainTex("Sprite Texture", 2D) = "white" {}
        _Color("Tint", Color) = (1,1,1,1)
        _LightPos("Light Position", Vector) = (0, 0, 0, 0)
        _FadeStrength("Fade Strength", Float) = 10
    }

    SubShader
    {
        Tags { "RenderType" = "Transparent" "Queue" = "Transparent" }
        Blend SrcAlpha OneMinusSrcAlpha
        ZWrite Off
        Cull Off
        Lighting Off

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            sampler2D _MainTex;
            float4 _Color;
            float4 _LightPos;
            float _FadeStrength;

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float3 worldPos : TEXCOORD1;
            };

            v2f vert(appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {
                float yDiff = i.worldPos.y - _LightPos.y;

                // Jeśli światło za obiektem – zacznij wygaszać światło
                float fade = saturate(1 - max(0, -yDiff) * _FadeStrength);

                fixed4 col = tex2D(_MainTex, i.uv) * _Color;
                col.rgb *= fade;

                return col;
            }
            ENDCG
        }
    }
}